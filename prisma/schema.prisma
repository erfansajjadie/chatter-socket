// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  name          String
  mobile        String        @unique
  avatar        String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  pushToken     String?
  messages      Message[]
  isOnline      Boolean       @default(false)
  socketId      String?
  participants  Participant[]
  startedCalls  Call[]        @relation("Caller")
  receivedCalls Call[]        @relation("Receiver")
}

model Conversation {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  image           String?
  name            String?
  lastMessageDate DateTime?
  type            ConversationType
  messages        Message[]
  participants    Participant[]
  calls           Call[]
}

model Message {
  id             Int          @id @default(autoincrement())
  text           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         Int
  conversationId Int
  voiceDuration  Int?
  type           MessageType  @default(TEXT)
  file           String?      @db.LongText
  isSeen         Boolean      @default(false)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Call {
  id             Int          @id @default(autoincrement())
  callerId       Int
  receiverId     Int
  conversationId Int
  callType       CallType
  callStatus     CallStatus   @default(CALLING)
  duration       Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  caller         User         @relation("Caller", fields: [callerId], references: [id], onDelete: Cascade)
  receiver       User         @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Participant {
  id             Int          @id @default(autoincrement())
  userId         Int
  conversationId Int
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

enum ConversationType {
  PRIVATE
  GROUP
  VOICE
  VIDEO
}

enum MessageType {
  TEXT
  VOICE
  FILE
  IMAGE
  INFO
}

enum CallType {
  VOICE
  VIDEO
}

enum CallStatus {
  CALLING
  RINGING
  ACCEPTED
  REJECTED
  ENDED
}
